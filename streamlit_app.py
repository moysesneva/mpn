import streamlit as st
import pandas as pd
import requests
import io
import openai
import os
from pandas.tseries.offsets import BusinessDay  # Para calcular dias √∫teis

st.set_page_config(page_title="Agente de Leads Priorit√°rios", layout="wide")

# 1) Cabe√ßalho e instru√ß√µes
st.title("An√°lise de Leads Priorit√°rios")
st.markdown("""
Este aplicativo permite carregar uma base de dados de atendimentos em formato Excel (.xlsx).
Voc√™ pode fazer upload do arquivo ou inserir uma URL direta.
Ap√≥s o carregamento, o sistema identificar√° automaticamente os leads que requerem aten√ß√£o urgente e gerar√° um relat√≥rio detalhado usando um agente inteligente.

**Crit√©rios de Prioridade:**
- Leads com sinais de interesse/obje√ß√£o no registro
- Leads sem contato nos √∫ltimos 2 dias √∫teis

**Certifique-se de ter configurado sua chave da API do OpenAI em**
`.streamlit/secrets.toml` **ou como vari√°vel de ambiente** `OPENAI_API_KEY`.
""")

# 2) Carregamento da chave e inicializa√ß√£o do cliente
api_key = None
try:
    # Tenta ler do st.secrets, que no Streamlit Cloud l√™ do Secrets
    api_key = st.secrets["openai"]["api_key"]
    st.sidebar.success("Chave da API carregada de secrets.")
    st.write(f"Chave encontrada (secrets): {api_key[:5]}...") # Feedback visual
except KeyError:
    # Se n√£o encontrar em secrets, tenta ler da vari√°vel de ambiente
    api_key = os.environ.get("OPENAI_API_KEY")
    if api_key:
        st.sidebar.success("Chave da API carregada de vari√°vel de ambiente.")
        st.write(f"Chave encontrada (ambiente): {api_key[:5]}...") # Feedback visual
    else:
        st.sidebar.error(
            "Chave da API do OpenAI n√£o encontrada. "
            "Configure-a nas 'Secrets' do Streamlit Cloud ou como vari√°vel de ambiente `OPENAI_API_KEY`."
        )
        st.stop() # Para a execu√ß√£o do app se a chave n√£o for encontrada

try:
    client = openai.OpenAI(api_key=api_key)
except Exception as e:
    st.sidebar.error(f"Erro ao inicializar cliente OpenAI: {e}")
    st.stop() # Para a execu√ß√£o se o cliente n√£o puder ser inicializado

# 3) Upload ou URL do Excel
st.header("1. Carregar Base de Conhecimento (.xlsx)")
source = st.radio("Selecione a origem do arquivo:", ("Upload", "URL"))

excel_bytes = None
if source == "Upload":
    uploaded_file = st.file_uploader("Selecione o arquivo .xlsx", type=["xlsx"])
    if uploaded_file:
        excel_bytes = uploaded_file.read()
else:
    url = st.text_input("Insira a URL do arquivo .xlsx")
    if url:
        try:
            resp = requests.get(url)
            resp.raise_for_status()
            excel_bytes = resp.content
        except Exception as e:
            st.error(f"Erro ao baixar o arquivo: {e}")

if excel_bytes is None:
    st.info("Por favor, fa√ßa o upload do arquivo ou insira a URL para continuar.")
    st.stop() # Para a execu√ß√£o se o arquivo n√£o for carregado

# 4) Leitura e tratamento b√°sico
try:
    df = pd.read_excel(io.BytesIO(excel_bytes), engine="openpyxl")
    df['Data do Atendimento'] = pd.to_datetime(df['Data do Atendimento'], errors='coerce')
    df.dropna(subset=['Data do Atendimento'], inplace=True)
    df["Registro"] = df["Registro"].astype(str).fillna("")
    df["Atendente"] = df["Atendente"].astype(str).fillna("N√£o Informado")
except Exception as e:
    st.error(f"Falha ao ler/processar o Excel: {e}")
    st.stop() # Para a execu√ß√£o se houver erro no processamento do Excel

required_cols = ["Data do Atendimento", "Nome do Atendido", "Atendente", "Registro"]
missing = [c for c in required_cols if c not in df.columns]
if missing:
    st.error(f"Colunas faltantes no arquivo: {missing}")
    st.stop() # Para a execu√ß√£o se colunas essenciais estiverem faltando

# 5) Filtragem de leads priorit√°rios
keywords = r"repique|novo repique|obje√ß√£o|obje√ß√µes|urgente|fechar|matricula|interessado|proposta"
mask_kw = df["Registro"].str.contains(keywords, case=False, na=False)
two_bd_ago = pd.Timestamp.now() - BusinessDay(2)
mask_date = df['Data do Atendimento'] <= two_bd_ago
df_priority = df[mask_kw | mask_date].reset_index(drop=True)

st.header("2. Leads Priorit√°rios Identificados (Crit√©rios Atualizados)")
if df_priority.empty:
    st.warning("Nenhum lead priorit√°rio encontrado com os crit√©rios atuais.")
    st.stop() # Para a execu√ß√£o se n√£o houver leads priorit√°rios
else:
    st.dataframe(df_priority)

# 6) Prompt do agente - Adaptado para processar UM lead por vez
agent_prompt = """
<agente>[Role]
Voc√™ √© um agente especialista em an√°lise de dados de leads, focado em identificar leads que requerem aten√ß√£o imediata e fornecer sugest√µes de abordagem via WhatsApp. Voc√™ √© um consultor de vendas experiente.

[Objetivo]
Seu objetivo √© analisar os dados de **UM √öNICO LEAD** fornecido e gerar APENAS a se√ß√£o do relat√≥rio correspondente a este lead, incluindo uma sugest√£o de mensagem para WhatsApp.

[Cen√°rio]
Voc√™ receber√° os dados de um lead priorit√°rio por vez. Sua tarefa √© gerar a sa√≠da formatada para este lead espec√≠fico.

[Solu√ß√£o Esperada]
Gere a se√ß√£o do relat√≥rio para o lead fornecido, formatada em **Markdown**, seguindo este modelo EXATO:

---
**Lead Priorit√°rio:**
Nome: [Nome completo do Atendido]
Atendente: [Primeiro nome do Atendente]
Data: [Data do Atendimento]
Motivo da Prioridade: [Breve descri√ß√£o do motivo, baseada no 'Registro' ou na falta de contato recente. Exemplos: "Obje√ß√£o de Pre√ßo", "Interesse em Fechar Matr√≠cula", "Sem Contato h√° mais de 2 dias √∫teis", "Repique Pendente"].
Sugest√£o de Abordagem (WhatsApp): [Mensagem objetiva, jovial, com uso moderado de emojis, pronta para envio. Personalize com base no 'Registro' ou falta de contato. Inclua placeholders como "[Nome do Lead]", "[Seu Nome]".]
---

-   Use **negrito** para os t√≠tulos de se√ß√£o conforme o modelo.
-   Inclua a linha horizontal (`---`) **apenas no in√≠cio e no fim** da se√ß√£o deste lead.
-   Se o 'Registro' mencionar "Repique" ou "novo repique", adicione uma linha extra AP√ìS a Sugest√£o de Abordagem, formatada como: **Alerta Especial: Repique/Novo Repique para [Nome Completo do Lead]**.
-   Seja conciso e direto.

[Exemplo de Entrada (voc√™ receber√° os dados neste formato)]
Dados do Lead Priorit√°rio:
- Nome Lead: Josiele Pereira
  Atendente: Mariana
  Data: 2025-01-04
  Registro Completo: O lead mencionou que achou o pre√ßo alto, mas ficou de pensar. Poss√≠vel obje√ß√£o de pre√ßo.

[Exemplo de Sa√≠da Esperada (em Markdown)]
---
**Lead Priorit√°rio:**
Nome: Josiele Pereira
Atendente: Mariana
Data: 2025-01-04
Motivo da Prioridade: Obje√ß√£o de Pre√ßo
Sugest√£o de Abordagem (WhatsApp):
Ol√°, Josiele! üëã Tudo bem por a√≠?

Vi aqui que voc√™ mencionou sua d√∫vida sobre valores. Queria ver se consigo te ajudar rapidinho com isso! Que tal a gente conversar 5 minutinhos? ‚ú®

Me diz o melhor hor√°rio pra voc√™! üòä
---
""".strip()


def gerar_relatorio(client: openai.OpenAI, df_leads: pd.DataFrame) -> str:
    relatorio_completo = []
    total_leads = len(df_leads)

    # Itera sobre cada lead no DataFrame de priorit√°rios
    for index, row in df_leads.iterrows():
        st.info(f"Processando lead {index + 1} de {total_leads}...") # Feedback de progresso

        atendente = str(row["Atendente"]).split()[0] if pd.notna(row["Atendente"]) else "N/A"
        registro_str = str(row["Registro"]) if pd.notna(row["Registro"]) else ""

        # Prepara o conte√∫do para este lead espec√≠fico
        user_content = (
            "Dados do Lead Priorit√°rio:\n"
            f"- Nome Lead: {row['Nome do Atendido']}\n"
            f"  Atendente: {atendente}\n"
            f"  Data: {row['Data do Atendimento'].strftime('%Y-%m-%d') if pd.notna(row['Data do Atendimento']) else 'N/A'}\n"
            f"  Registro Completo: {registro_str}"
        )

        try:
            # Chama a API para este lead individual
            resp = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": agent_prompt},
                    {"role": "user",   "content": user_content}
                ],
                max_tokens=500, # Reduzido, pois agora processa apenas um lead por vez
                temperature=0.7
            )
            # Adiciona a resposta do agente (se√ß√£o do relat√≥rio) √† lista
            relatorio_completo.append(resp.choices[0].message.content)

        except Exception as e:
            # Adiciona uma mensagem de erro para este lead espec√≠fico se a API falhar
            st.error(f"Erro na chamada da API para {row['Nome do Atendido']}: {e}")
            st.write(e) # Mostra o erro detalhado da API
            relatorio_completo.append(
                f"---"
                f"\n**Lead Priorit√°rio:**\nNome: {row['Nome do Atendido']}\n"
                f"Atendente: {atendente}\nData: {row['Data do Atendimento'].strftime('%Y-%m-%d') if pd.notna(row['Data do Atendimento']) else 'N/A'}\n"
                f"Motivo da Prioridade: Erro ao processar\n"
                f"Sugest√£o de Abordagem (WhatsApp): Erro na gera√ß√£o\n" # Mensagem gen√©rica de erro na sugest√£o
                f"---"
            )


    # Junta todas as se√ß√µes geradas pelo agente em um √∫nico relat√≥rio
    # Note que o agente j√° inclui os "---" no in√≠cio e fim de cada se√ß√£o
    return "".join(relatorio_completo)


# 7) Bot√£o e exibi√ß√£o em Markdown
if st.button("Gerar Relat√≥rio de Leads Priorit√°rios"):
    with st.spinner("Processando e gerando relat√≥rio..."):
        relatorio = gerar_relatorio(client, df_priority)
        st.header("3. Relat√≥rio Gerado pelo Agente")
        # Exibe o relat√≥rio completo. Como o agente j√° formata com Markdown e "---",
        # st.markdown renderizar√° corretamente.
        st.markdown(relatorio)
    # 8. teste final